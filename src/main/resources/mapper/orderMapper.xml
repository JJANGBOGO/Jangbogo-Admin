<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.jangbogo.admin.dao.OrderMapper">
    <!--
        태   그 : sql
        아이디명 : searchCondition
        기   능 : 반복 할 내용을 간단히 저장 후 재사용 - 주문 리스트 검색 조건 쿼리
    -->
    <sql id="searchCondition">
        <choose>
            <when test='option=="E"'>
                AND A.ORDR_NM LIKE concat('%', #{keyword}, '%')
            </when>
            <when test='option=="N"'>
                AND A.IDX LIKE concat('%', #{keyword}, '%')
            </when>
            <otherwise>
                AND (A.ORDR_NM LIKE concat('%', #{keyword}, '%')
                OR A.IDX LIKE concat('%', #{keyword}, '%'))
            </otherwise>
        </choose>
    </sql>

    <!--
        태   그 : sql
        아이디명 : prodNameColumnInList
        기   능 : 반복 할 내용을 간단히 저장 후 재사용 - 주문 리스트 중 SELECT문에 작성할 '상품명' 컬럼 쿼리
    -->
    <sql id="prodNameColumnInList">
        (CASE
            WHEN PLIST_TOT > 1 THEN                                                                                     -- 주문품목수가 두 개 이상일 경우, '첫 번째 상품명 외 '품목수 - 1'건' 형식으로 저장
                (CONCAT(
                    (
                        SELECT PROD_NM
                        FROM ORD_DTL
                        WHERE ORD_IDX = A.IDX
                        LIMIT 1
                    ) , ' 외 ',
                    (
                        SELECT PLIST_TOT - 1
                        FROM ORD
                        WHERE IDX = A.idx
                    ), '건'))
            ELSE                                                                                                        -- 주문품목수가 한 개일 경우, '상품명' 형식으로 저장
                (SELECT PROD_NM
                 FROM ORD_DTL
                 WHERE ORD_IDX = A.IDX)
        END) as prod_nm
    </sql>
    <!--
        태   그 : select
        기   능 : '주문' 테이블의 전체 데이터 조회
        아이디명 : selectList
    -->
    <select id="selectSelectedPage" parameterType="SearchCondition" resultType="hashmap">
        SELECT DISTINCT A.IDX as idx, A.ORD_TM as ord_tm, A.ORDR_NM as ordr_nm,
        <include refid="prodNameColumnInList"/>
        ,A.TOT_AMT as tot_amt, SETL_MN_CD as setl_mn_cd, STATE_CD as state_cd
        FROM ORD A
            JOIN (
                SELECT *
                FROM ORD_DTL
            ) B
        ON  A.IDX = B.ORD_IDX
        WHERE true
        <include refid="searchCondition"/>
        ORDER BY ORD_TM DESC, IDX DESC
        LIMIT #{offset}, #{pageSize};
    </select>

    <!--
    태   그 : select
    기   능 : '주문상태코드'가 1인 주문 내역 조회
    아이디명 : selectPaidList
-->
    <select id="selectPaidList" parameterType="SearchCondition" resultType="hashmap">
        SELECT DISTINCT A.IDX as idx, A.ORD_TM as ord_tm, A.ORDR_NM as ordr_nm,
        <include refid="prodNameColumnInList"/>
        , A.TOT_AMT as tot_amt, SETL_MN_CD as setl_mn_cd, STATE_CD as state_cd
        FROM ORD A
        JOIN (
        SELECT *
        FROM ORD_DTL
        ) B
        ON  A.IDX = B.ORD_IDX
        WHERE A.STATE_CD =  B.ORD_STATE_CD AND A.STATE_CD = 1
        <include refid="searchCondition"/>
        ORDER BY ORD_TM DESC, IDX DESC
        LIMIT #{offset}, #{pageSize};
    </select>

    <!--
        태   그 : select
        기   능 : '주문상태코드'가 2인 주문 내역 조회
        아이디명 : selectDPList
    -->
    <select id="selectDPList" parameterType="SearchCondition" resultType="hashmap">
        SELECT DISTINCT A.IDX as idx, A.ORD_TM as ord_tm, A.ORDR_NM as ordr_nm,
        <include refid="prodNameColumnInList"/>
        ,A.TOT_AMT as tot_amt, SETL_MN_CD as setl_mn_cd, STATE_CD as state_cd, C.WYBL as wybl
        FROM ORD A
        JOIN (
        SELECT *
        FROM ORD_DTL
        ) B
        ON  A.IDX = B.ORD_IDX
        JOIN (SELECT * FROM DLVRY) C ON B.ORD_IDX = C.ORD_IDX
        WHERE A.STATE_CD =  B.ORD_STATE_CD AND A.STATE_CD = 2
        <include refid="searchCondition"/>
        ORDER BY ORD_TM DESC, IDX DESC
        LIMIT #{offset}, #{pageSize};
    </select>

    <!--
        태   그 : select
        기   능 : '주문상태코드'가 3인 주문 내역 조회
        아이디명 : selectDPList
    -->
    <select id="selectDeliveringList" parameterType="SearchCondition" resultType="hashmap">
        SELECT DISTINCT A.IDX as idx, A.ORD_TM as ord_tm, A.ORDR_NM as ordr_nm,
        <include refid="prodNameColumnInList"/>
        ,A.TOT_AMT as tot_amt, SETL_MN_CD as setl_mn_cd, STATE_CD as state_cd, C.WYBL as wybl
        FROM ORD A
        JOIN (
        SELECT *
        FROM ORD_DTL
        ) B
        ON  A.IDX = B.ORD_IDX
        JOIN (SELECT * FROM DLVRY) C ON B.ORD_IDX = C.ORD_IDX
        WHERE A.STATE_CD =  B.ORD_STATE_CD AND A.STATE_CD = 3
        <include refid="searchCondition"/>
        ORDER BY ORD_TM DESC, IDX DESC
        LIMIT #{offset}, #{pageSize};
    </select>

    <!--
        태   그 : select
        기   능 : '주문' 테이블과 '주문상세' 테이블의 조인 데이터 조회
        아이디명 : selectOrder
    -->
    <select id="selectOrderDetails" resultType="hashmap">
        SELECT ORD_DTL.IDX as idx, ORD.ORD_TM as ord_tm, ORD.IDX as ord_idx ,ORD.ORDR_NM as ordr_nm, ORD_DTL.PROD_NM as prod_nm, ORD_DTL.PROD_PRC  as prod_prc, ORD_DTL.PROD_QTY as prod_qty, ORD.TOT_AMT as tot_amt, ORD_DTL.SETL_MN_CD as setl_mn_cd, ORD.STATE_CD as state_cd
        FROM ORD_DTL
        JOIN ORD
        ON ORD_DTL.ORD_IDX = ORD.IDX AND ORD.IDX = #{idx};
    </select>

    <!--
        태   그 : select
        기   능 : '주문상세' 테이블과 '주문이력' 테이블의 조인 데이터 조회
        아이디명 : selectOrderHistory
    -->
    <select id="selectOrderHistory" resultType="hashmap">
        SELECT ORD_HIST.CHG_TM as chg_tm, ORD_HIST.ORD_IDX as ord_idx, ORD_HIST.ORD_DTL_IDX as ord_dtl_idx, ORD_HIST.PROD_NM as prod_nm, ORD_HIST.ORD_STATE_CD as ord_state_cd
        FROM ORD_HIST
        JOIN ORD
        ON ORD_HIST.ORD_IDX = ORD.IDX AND ORD.IDX = #{idx};
    </select>

    <!--
        태   그 : select
        기   능 : '주문상세' 테이블과 '주문이력' 테이블의 조인 데이터 조회
        아이디명 : selectResultCnt
    -->
    <select id="selectResultCnt" parameterType="SearchCondition" resultType="int">
        SELECT COUNT(*)
        FROM ORD A
        WHERE true
        <include refid="searchCondition"/>
    </select>

    <!--
        태   그 : select
        기   능 : '주문상세' 테이블과 '주문이력' 테이블의 조인 데이터 중 '결제완료' 상태인 데이터 조회
        아이디명 : selectPaidResultCnt
    -->
    <select id="selectPaidResultCnt" parameterType="SearchCondition" resultType="int">
        SELECT COUNT(*)
        FROM ORD A
        WHERE STATE_CD = 1 AND TRUE
        <include refid="searchCondition"/>
    </select>

    <!--
        태   그 : select
        기   능 : '주문상세' 테이블과 '주문이력' 테이블의 조인 데이터 중 '배송준비중' 상태인 데이터 조회
        아이디명 : selectDPResultCnt
     -->
    <select id="selectDPResultCnt" parameterType="SearchCondition" resultType="int">
        SELECT COUNT(*)
        FROM ORD A
        WHERE STATE_CD = 2 AND TRUE
        <include refid="searchCondition"/>
    </select>

    <!--
        태   그 : select
        기   능 : '주문상세' 테이블과 '주문이력' 테이블의 조인 데이터 중 '배송중' 상태인 데이터 조회
        아이디명 : selectDeliveringCnt
    -->
    <select id="selectDeliveringCnt" parameterType="SearchCondition" resultType="int">
        SELECT COUNT(*)
        FROM ORD A
        WHERE STATE_CD = 3 AND TRUE
        <include refid="searchCondition"/>
    </select>

    <!--
        태   그 : update
        기   능 : '주문상태코드'가 1인 주문의 상태코드를 '2'로 수정
        아이디명 : updatePaidOrder
    -->
    <update id="updatePaidOrder" parameterType="Integer">
        UPDATE ORD
        SET STATE_CD = 2, UPT_TM = now()                                                                                -- 주문상태코드 '배송준비중'으로 수정
        WHERE IDX = #{order_idx}
    </update>

    <!--
        태   그 : update
        기   능 : '주문상태코드'가 1인 주문상세의 상태코드를 '2'로 수정
        아이디명 : updatePaidOrderDetail
    -->
    <update id="updatePaidOrderDetail" parameterType="Integer">
        UPDATE ORD_DTL
        SET ORD_STATE_CD = 2, CNCL_POSBL_STATE_CD = 2, UPT_TM = now()                                                  -- (1) 주문상태코드 '배송준비중'으로 (2) 주문취소가능상태코드 '주문취소불가능'으로 수정
        WHERE ORD_IDX = #{order_idx}
    </update>

    <!--
        태   그 : insert
        기   능 : '주문상태코드'가 1인 주문이력의 상태코드를 '2'로 수정
        아이디명 : insertPaidOrderHistory
    -->
    <insert id="insertPaidOrderHistory" parameterType="java.util.List">
        INSERT INTO ORD_HIST(CRT_TM, CHG_TM, UPT_TM, ORD_DTL_IDX, ORD_IDX, PROD_IDX, PROD_NM, ORD_STATE_CD)
        VALUES
        <foreach item="item" index="index" collection="list" separator=" , ">
            (
                #{item.ord_tm}, now(), now(), #{item.idx}, #{item.ord_idx}, #{item.prod_idx}, #{item.prod_nm}, 2        -- 주문상태코드 '배송준비중'으로 수정
            )
        </foreach>
    </insert>
    <!--
        태   그 : update
        기   능 : '운송장번호'를 배송 데이터에 삽입(수정)
        아이디명 : updateWaybill
    -->
    <update id="updateWaybill" parameterType="map">
        UPDATE DLVRY
        SET WYBL = #{waybill}
        WHERE ORD_IDX = #{order_idx};
    </update>

    <!--
        태   그 : update
        기   능 : '주문상태코드'가 2인 주문의 상태코드를 '3'로 수정
        아이디명 : updatePaidOrderDelivering
    -->
    <update id="updatePaidOrderDelivering" parameterType="Integer">
        UPDATE ORD
        SET STATE_CD = 3, UPT_TM = now()                                                                                -- 주문상태코드 '배송중'으로 수정
        WHERE IDX = #{order_idx}
    </update>

    <!--
        태   그 : update
        기   능 : '주문상태코드'가 2인 주문상세의 상태코드를 '3'로 수정
        아이디명 : updatePaidOrderDetailDelivering
    -->
    <update id="updatePaidOrderDetailDelivering" parameterType="Integer">
        UPDATE ORD_DTL
        SET ORD_STATE_CD = 3, UPT_TM = now()                                                                            -- 주문상태코드 '배송중'으로 수정
        WHERE ORD_IDX = #{order_idx}
    </update>

    <!--
        태   그 : insert
        기   능 : '주문상태코드'가 2인 주문이력의 상태코드를 '3'로 수정
        아이디명 : insertPaidOrderHistoryDelivering
    -->
    <insert id="insertPaidOrderHistoryDelivering" parameterType="java.util.List">
        INSERT INTO ORD_HIST(CRT_TM, CHG_TM, UPT_TM, ORD_DTL_IDX, ORD_IDX, PROD_IDX, PROD_NM, ORD_STATE_CD)
        VALUES
        <foreach item="item" index="index" collection="list" separator=" , ">
            (
            #{item.ord_tm}, now(), now(), #{item.idx}, #{item.ord_idx}, #{item.prod_idx}, #{item.prod_nm}, 3            -- 주문상태코드 '배송중'으로 수정
            )
        </foreach>
    </insert>

    <!--
         태   그 : update
         기   능 : '주문상태코드'가 3인 주문의 상태코드를 '4'로 수정
         아이디명 : updateOrderStateDeliveryCompleted
    -->
    <update id="updateOrderStateDeliveryCompleted" parameterType="Integer">
        UPDATE ORD
        SET STATE_CD = 4, UPT_TM = now()                                                                                -- 주문상태코드 '배송완료'로 수정
        WHERE IDX = #{order_idx}
    </update>

    <!--
        태   그 : update
        기   능 : '주문상태코드'가 3인 주문상세의 상태코드를 '4'로 수정
        아이디명 : updateOrderDetailStateDeliveryCompleted
    -->
    <update id="updateOrderDetailStateDeliveryCompleted" parameterType="Integer">
        UPDATE ORD_DTL
        SET ORD_STATE_CD = 4, UPT_TM = now(), PROD_LATE_STATE_CD = 2                                                    -- (1) 주문상태코드 '배송완료'로 (2) 후기작성상태코드 '후기작성가능'으로 수정
        WHERE ORD_IDX = #{order_idx}
    </update>

    <!--
        태   그 : insert
        기   능 : '주문상태코드'가 3인 주문이력의 상태코드를 '4'로 수정
        아이디명 : insertOrderHistoryStateDeliveryCompleted
    -->
    <insert id="insertOrderHistoryStateDeliveryCompleted" parameterType="java.util.List">
        INSERT INTO ORD_HIST(CRT_TM, CHG_TM, UPT_TM, ORD_DTL_IDX, ORD_IDX, PROD_IDX, PROD_NM, ORD_STATE_CD)
        VALUES
        <foreach item="item" index="index" collection="list" separator=" , ">
            (
            #{item.ord_tm}, now(), now(), #{item.idx}, #{item.ord_idx}, #{item.prod_idx}, #{item.prod_nm}, 4            -- 주문상태코드 '배송완료'로 수정
            )
        </foreach>
    </insert>
</mapper>
